#header {
  color: #6c94be;
}
#footer {
  color: #5b83ad;
}
.f12 {
  font-size: 12px;
}
.sider-bar {
  font-weight: bold;
  font-size: 12px;
}
.bordered-fistway {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.bordered-second {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
#menu a {
  color: #111;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}
.post a {
  color: red;
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
  color: #333;
}
.my-mixin {
  color: black;
}
.class {
  color: black;
  background: white;
}
button:hover {
  border: 1px solid red;
}
/*
// all do the same thing
#outer > .inner;
#outer > .inner();
#outer.inner;
#outer.inner();
*/
#outer .inner {
  color: red;
}
.c {
  color: red;
}
/*
The !important keyword
Use the !important keyword after mixin call to mark all properties inherited by it as !important:
*/
.unimportant {
  background: 1;
  color: #990000;
}
.important {
  background: 2 !important;
  color: #990000 !important;
}
/*
Named Parameters

A mixin reference can supply parameters values by their names instead of just positions. Any parameter can be referenced by its name and they do not have to be in any special order:
*/
.class1 {
  color: #33acfe;
  margin: 20px;
  padding: 20px;
}
.class2 {
  color: #efca44;
  margin: 10px;
  padding: 40px;
}
/*
The @arguments variable

@arguments has a special meaning inside mixins, it contains all the arguments passed, when the mixin was called. This is useful if you don't want to deal with individual parameters:
*/
.big-block {
  -webkit-box-shadow: 2px 5px 1px #000000;
  -moz-box-shadow: 2px 5px 1px #000000;
  box-shadow: 2px 5px 1px #000000;
}
