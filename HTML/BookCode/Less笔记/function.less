/*
作为函数使用的Mixin
All variables defined in a mixin are visible and can be used in caller's scope (unless the caller defines its own variable with the same name).

Example:

*/

.mixin() {
    @width: 100%;
    @height: 200px;
}

.caller {
    .mixin();
    width: @width;
    height: @height;
}





/*
Thus variables defined in a mixin can act as its return values. This allows us to create a mixin that can be used almost like a function.

Example:
*/

.average(@x, @y) {
    @average: ((@x + @y) / 2);
}

div {
    .average(16px, 50px); // "call" the mixin
    padding: @average; // use its "return" value
}


.bg {
    background-color: darken(#fff, 100%);
}




/*#000*/

.bb {
    background-color: lighten(#000, 100%);
}




/*fff*/

.bb {
    background-color: lighten(#000, 50%);
}




/*#808080*/

.border-radius(@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.dfdf {
    .border-radius(0);
}


.button {
    .border-radius(6px);
    width: 10px;
}




/*
.button {
  .border-radius(6px);
}

.button {
  .border-radius;
}
*/

.box-shadow(@x: 0;
@y: 0;
@blur: 1px;
@color: #000) {
    -webkit-box-shadow: @arguments;
    -moz-box-shadow: @arguments;
    box-shadow: @arguments;
}




/*
.big-block {
  .box-shadow(2px; 5px);
}
*/

.button {
    .border-radius(6px);
}

.fz(@fontsize: 14px, @important: 0) {
    & when (@important=1) {
        & {
            font-size: @fontsize !important;
        }
        [data-dpr="2"] & {
            font-size: @fontsize*2 !important;
        }
        [data-dpr="3"] & {
            font-size: @fontsize*3 !important;
        }
    }

    & when (@important=0) {
        & {
            font-size: @fontsize;
        }
        [data-dpr="2"] & {
            font-size: @fontsize*2;
        }
        [data-dpr="3"] & {
            font-size: @fontsize*3;
        }
    }
}

.adb {
    .fz(14px);
}
.adbddd {
    .fz(14px, 1);
}


.keyframes (@name, @frames) {
    @-webkit-keyframes @name {
        @frames();
    }
    @-moz-keyframes @name {
        @frames();
    }
    @-ms-keyframes @name {
        @frames();
    }
    @-o-keyframes @name {
        @frames();
    }
    @keyframes @name {
        @frames();
    }
}


.transform(@transform) {
    -webkit-transform: @transform;
    -moz-transform: @transform;
    -ms-transform: @transform;
    -o-transform: @transform;
    transform: @transform;
}
.transformOrigin(@attr) {
    -webkit-transform-origin: @attr;
    -moz-transform-origin: @attr;
    -o-transform-origin: @attr;
    -ms-transform-origin: @attr;
    transform-origin: @attr;
}
.animation(@attr) {
    -webkit-animation: @attr;
    -moz-animation: @attr;
    -ms-animation: @attr;
    -o-animation: @attr;
    animation: @attr;
}

.dfsdfsdfsdf{
  .transform(translate(-50%, -50%));
}
/*
.keyframes (line, {
    0% {
        background-size: 0% 2px;
    }
    100% {
        background-size: 100% 2px;
    }
});



.keyframes (line, {
    0% {
        .transform(rotate(0deg));
    }
    100% {
        .transform(rotate(360deg));
    }
});
*/
